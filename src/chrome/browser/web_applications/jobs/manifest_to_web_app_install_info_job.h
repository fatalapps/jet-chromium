// Copyright 2025 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_WEB_APPLICATIONS_JOBS_MANIFEST_TO_WEB_APP_INSTALL_INFO_JOB_H_
#define CHROME_BROWSER_WEB_APPLICATIONS_JOBS_MANIFEST_TO_WEB_APP_INSTALL_INFO_JOB_H_

#include <memory>

#include "base/functional/callback_forward.h"
#include "base/functional/function_ref.h"
#include "base/memory/weak_ptr.h"
#include "chrome/browser/web_applications/web_app_constants.h"
#include "chrome/browser/web_applications/web_app_icon_operations.h"
#include "chrome/browser/web_applications/web_app_install_info.h"
#include "chrome/browser/web_applications/web_app_install_utils.h"
#include "chrome/browser/web_applications/web_app_logging.h"
#include "chrome/browser/web_applications/web_contents/web_app_data_retriever.h"
#include "third_party/blink/public/mojom/manifest/manifest.mojom.h"

namespace content {
class WebContents;
}  // namespace content

namespace web_app {

using WebAppInstallInfoCreationCallback =
    base::OnceCallback<void(std::unique_ptr<WebAppInstallInfo>)>;

class WebAppDataRetriever;

// Contains a list of options that are applied while constructing the
// `WebAppInstallInfo` from a `blink::mojom::Manifest`. Default populated with
// the values that perform the default behavior for most manifest triggered
// installs.
// TODO(dibyapal): Ensure data correctness can be verified.
struct WebAppInstallInfoConstructOptions {
  // Normally, if icon downloads fail or if there are no urls available for
  // icons to download, the icons are generated by the web app system. This
  // allows skipping that icon generation, and is useful for differentiating
  // between whether icons were generated because they failed to download or
  // because there were no icon urls to download.
  bool bypass_icon_generation_if_no_url = false;
  // Download favicons also from the page if set as part of the icon
  // downloading.
  bool download_page_favicons = false;
  // If the download should end early if any failures occur.
  bool fail_all_if_any_fail = false;
  // Record results of icon downloading on manifest update, should only be
  // triggered from manifest updates.
  bool record_icon_results_on_update = false;
  // Used to force override the name from a different `WebAppInstallInfo`
  // instance.
  bool force_override_name = false;
  // Used to bypass downloading primary manifest icons, to be used by the
  // manifest update process.
  bool skip_primary_icon_download = false;
};

// The role of this job is to take a `blink::mojom::Manifest`, parse it,
// populate a `WebAppInstallInfo` and return it. If a `fallback_info` exists,
// it is used to populate `title`, `description`, and `icons` if those aren't
// supplied by the manifest, as well as `mobile_capable`.
class ManifestToWebAppInstallInfoJob {
 public:
  virtual ~ManifestToWebAppInstallInfoJob();

  // Starts the job to parse the manifest fields, fetch icons, and then load
  // them onto the `install_info_`.
  // `icon_url_modifications` is applied to make modifications to the list of
  // icon urls that need to be downloaded.
  static std::unique_ptr<ManifestToWebAppInstallInfoJob> CreateAndStart(
      const blink::mojom::Manifest& manifest,
      WebAppDataRetriever& data_retriever,
      bool background_installation,
      webapps::WebappInstallSource install_source,
      base::WeakPtr<content::WebContents> web_contents,
      base::FunctionRef<void(IconUrlSizeSet&)> icon_url_modifications,
      base::Value::Dict& debug_data,
      WebAppInstallInfoCreationCallback creation_callback,
      WebAppInstallInfoConstructOptions options =
          WebAppInstallInfoConstructOptions{},
      std::optional<WebAppInstallInfo> fallback_info = std::nullopt);

  base::Value::Dict GetManifestToWebAppInfoGenerationErrors();

 private:
  ManifestToWebAppInstallInfoJob(
      const blink::mojom::Manifest& manifest,
      WebAppDataRetriever& data_retriever,
      bool background_installation,
      webapps::WebappInstallSource install_source,
      base::Value::Dict& debug_data,
      WebAppInstallInfoCreationCallback creation_callback,
      WebAppInstallInfoConstructOptions options,
      std::optional<WebAppInstallInfo> fallback_info);

  void Start(base::WeakPtr<content::WebContents> web_contents,
             base::FunctionRef<void(IconUrlSizeSet&)> icon_url_modifications);
  void ParseManifestAndPopulateInfo();
  void OnIconsFetchedGetInstallInfo(
      IconsDownloadedResult result,
      IconsMap icons_map,
      DownloadedIconsHttpResults icons_http_results);
  void CompleteJobAndRunCallback();

  std::unique_ptr<WebAppInstallInfo> install_info_;
  blink::mojom::ManifestPtr manifest_;
  base::raw_ref<WebAppDataRetriever> data_retriever_;
  InstallErrorLogEntry install_error_log_entry_;
  base::raw_ref<base::Value::Dict> debug_data_;
  WebAppInstallInfoCreationCallback creation_callback_;
  WebAppInstallInfoConstructOptions options_;
  std::optional<WebAppInstallInfo> fallback_info_;

  base::WeakPtrFactory<ManifestToWebAppInstallInfoJob> weak_ptr_factory_{this};
};

}  // namespace web_app

#endif  // CHROME_BROWSER_WEB_APPLICATIONS_JOBS_MANIFEST_TO_WEB_APP_INSTALL_INFO_JOB_H_
