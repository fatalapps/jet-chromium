// Copyright 2025 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module composebox.mojom;

import "mojo/public/mojom/base/big_buffer.mojom";
import "mojo/public/mojom/base/time.mojom";
import "mojo/public/mojom/base/unguessable_token.mojom";
import "components/omnibox/composebox/composebox_query.mojom";
import "components/omnibox/browser/searchbox.mojom";

// Information about a file selected by the user in the WebUI.
struct SelectedFileInfo {
  // Name of the file.
  string file_name;
  // Mime type of the file.
  string mime_type;
  // Time that the file was selected at.
  mojo_base.mojom.JSTime selection_time;
};

// Used by the WebUI page to bootstrap bidirectional communication.
interface PageHandlerFactory {
  // The component calls this method when it is first initialized.
  CreatePageHandler(pending_remote<Page> page,
                    pending_receiver<PageHandler> handler,
                    pending_remote<searchbox.mojom.Page> searchbox_page,
                    pending_receiver<searchbox.mojom.PageHandler> searchbox_handler);
};

// Browser-side handler for requests from NTP Composebox UI.
interface PageHandler {
  // Called when a user has started a composebox session.
  NotifySessionStarted();
  // Called when a user ends a composebox session.
  NotifySessionAbandoned();
  // Called when a user submits a query with valid input.
  SubmitQuery(string query_text,
              uint8 mouse_button,
              bool alt_key,
              bool ctrl_key,
              bool meta_key,
              bool shift_key);

  // File management.
  // Upload a file to the server. Handler will create a token for identifying
  // and return it via callback. The UnguessableToken can only be associated
  // with a file via this method and only with an UnguessableToken created by
  // the browser-process at this step.
  // The controller that houses the association is specific to the WebUI's
  // handler instance.
  // What the WebUI can do with the UnguessableToken:
  //   1. Delete a file from browser-process cache.
  //   2. Listen for status changes from browser-process. (Not implemented)
  //   3. Send list of tokens to browser-process when a query is submitted. The
  //      browser-side cross-references this list with what it has and only
  //      puts server IDs (separate IDs stored in browser-process) in the final
  //      query for files that the WebUI and browser-process have the same
  //      token for. (Not implemented)
  AddFile(SelectedFileInfo file_info, mojo_base.mojom.BigBuffer file_bytes) =>
      (mojo_base.mojom.UnguessableToken token);
  // Notify handler of file deletion. This removes the file from the
  // browser-side cache.
  DeleteFile(mojo_base.mojom.UnguessableToken token);
  // Clears all files from cache.
  ClearFiles();
};

// NewTabPage WebUI-side handler for requests from the browser.
interface Page {
  // Updates the status of a file upload operation. Used to update the user on
  // the status of a file upload operation.
  OnFileUploadStatusChanged(mojo_base.mojom.UnguessableToken token,
                           composebox_query.mojom.FileUploadStatus status,
                           composebox_query.mojom.FileUploadErrorType? error_type);
};
