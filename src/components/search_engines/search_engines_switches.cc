// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "components/search_engines/search_engines_switches.h"

#include "base/feature_list.h"

namespace switches {

// Additional query params to insert in the search and instant URLs.  Useful for
// testing.
COMPONENT_EXPORT(SEARCH_ENGINES_SWITCHES)
const char kExtraSearchQueryParams[] = "extra-search-query-params";

// Override the --no-first-run dialog suppression for the search dialog
// for testing
COMPONENT_EXPORT(SEARCH_ENGINES_SWITCHES)
const char kIgnoreNoFirstRunForSearchEngineChoiceScreen[] =
    "ignore-no-first-run-for-search-engine-choice-screen";

// Disable the search engine choice screen for testing / autmation.
COMPONENT_EXPORT(SEARCH_ENGINES_SWITCHES)
const char kDisableSearchEngineChoiceScreen[] =
    "disable-search-engine-choice-screen";

// Force-enable showing the search engine choice screen for testing regardless
// of region or choice already having been made.
COMPONENT_EXPORT(SEARCH_ENGINES_SWITCHES)
const char kForceSearchEngineChoiceScreen[] =
    "force-search-engine-choice-screen";

// Invalidates old search engine choices when Chrome detects that it has been
// transferred to a new device.
COMPONENT_EXPORT(SEARCH_ENGINES_SWITCHES)
BASE_FEATURE(kInvalidateSearchEngineChoiceOnDeviceRestoreDetection,
             "InvalidateSearchEngineChoiceOnDeviceRestoreDetection",
             base::FEATURE_DISABLED_BY_DEFAULT);

COMPONENT_EXPORT(SEARCH_ENGINES_SWITCHES)
const base::FeatureParam<bool> kInvalidateChoiceOnRestoreIsRetroactive{
    /*feature=*/&kInvalidateSearchEngineChoiceOnDeviceRestoreDetection,
    /*name=*/"is_retroactive", /*default_value=*/false};

// Use an explicit "NO_REPROMPT" value as default to avoid reprompting users
// who saw the choice screen in M121.
COMPONENT_EXPORT(SEARCH_ENGINES_SWITCHES)
BASE_FEATURE(kSearchEngineChoiceTriggerReprompt,
             "SearchEngineChoiceTriggerReprompt",
             base::FEATURE_DISABLED_BY_DEFAULT);
COMPONENT_EXPORT(SEARCH_ENGINES_SWITCHES)
const base::FeatureParam<std::string> kSearchEngineChoiceTriggerRepromptParams{
    &kSearchEngineChoiceTriggerReprompt,
    /*name=*/"reprompt",
    /*default_value=*/kSearchEngineChoiceNoRepromptString};

#if BUILDFLAG(IS_ANDROID)
COMPONENT_EXPORT(SEARCH_ENGINES_SWITCHES)
BASE_FEATURE(kClaySnackbar, "ClaySnackbar", base::FEATURE_ENABLED_BY_DEFAULT);
COMPONENT_EXPORT(SEARCH_ENGINES_SWITCHES)
BASE_FEATURE(kSuppressDefaultBrowserPromoIfChoiceSet,
             "SuppressDefaultBrowserPromoIfChoiceSet",
             base::FEATURE_ENABLED_BY_DEFAULT);
#endif

COMPONENT_EXPORT(SEARCH_ENGINES_SWITCHES)
BASE_FEATURE(kWipeChoicePrefsOnMissingDefaultSearchEngine,
             "WipeChoicePrefsOnMissingDefaultSearchEngine",
             base::FEATURE_DISABLED_BY_DEFAULT);

COMPONENT_EXPORT(SEARCH_ENGINES_SWITCHES)
BASE_FEATURE(kPrefetchParameterFix,
             "PrefetchParameterFix",
             base::FEATURE_ENABLED_BY_DEFAULT);

COMPONENT_EXPORT(SEARCH_ENGINES_SWITCHES)
BASE_FEATURE(kRemoveSearchboxStatsParamFromPrefetchRequests,
             "RemoveSearchboxStatsParamFromPrefetchRequests",
             base::FEATURE_ENABLED_BY_DEFAULT);

COMPONENT_EXPORT(SEARCH_ENGINES_SWITCHES)
BASE_FEATURE(kDisableSyncAutogeneratedSearchEngines,
             "DisableSyncAutogeneratedSearchEngines",
             base::FEATURE_ENABLED_BY_DEFAULT);

}  // namespace switches
