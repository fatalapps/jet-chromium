// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     org.jni_zero.SampleNonProxy

#ifndef org_jni_1zero_SampleNonProxy_JNI
#define org_jni_1zero_SampleNonProxy_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_helper.h"
// Macro for transition to enable_definition_macros=true.
#define DEFINE_JNI_FOR_SampleNonProxy()

// Java to native functions
// Forward declaration. To be implemented by the including .cc file.
static jlong JNI_SampleNonProxy_AddBookmark(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& jcaller,
    jint nativeChromeBrowserProvider,
    const jni_zero::JavaRef<jstring>& url,
    const jni_zero::JavaRef<jstring>& title,
    jboolean isFolder,
    jlong parentId);

JNI_ZERO_BOUNDARY_EXPORT jlong Java_org_jni_1zero_SampleNonProxy_nativeAddBookmark(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider,
    jstring url,
    jstring title,
    jboolean isFolder,
    jlong parentId) {
  auto _ret = JNI_SampleNonProxy_AddBookmark(
      env,
      jni_zero::JavaRef<jobject>::CreateLeaky(env, jcaller),
      nativeChromeBrowserProvider,
      jni_zero::JavaRef<jstring>::CreateLeaky(env, url),
      jni_zero::JavaRef<jstring>::CreateLeaky(env, title),
      isFolder,
      parentId);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jlong JNI_SampleNonProxy_AddBookmarkFromAPI(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& jcaller,
    jint nativeChromeBrowserProvider,
    const jni_zero::JavaRef<jstring>& url,
    const jni_zero::JavaRef<jobject>& created,
    const jni_zero::JavaRef<jobject>& isBookmark,
    const jni_zero::JavaRef<jobject>& date,
    const jni_zero::JavaRef<jbyteArray>& favicon,
    const jni_zero::JavaRef<jstring>& title,
    const jni_zero::JavaRef<jobject>& visits);

JNI_ZERO_BOUNDARY_EXPORT jlong Java_org_jni_1zero_SampleNonProxy_nativeAddBookmarkFromAPI(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider,
    jstring url,
    jobject created,
    jobject isBookmark,
    jobject date,
    jbyteArray favicon,
    jstring title,
    jobject visits) {
  auto _ret = JNI_SampleNonProxy_AddBookmarkFromAPI(
      env,
      jni_zero::JavaRef<jobject>::CreateLeaky(env, jcaller),
      nativeChromeBrowserProvider,
      jni_zero::JavaRef<jstring>::CreateLeaky(env, url),
      jni_zero::JavaRef<jobject>::CreateLeaky(env, created),
      jni_zero::JavaRef<jobject>::CreateLeaky(env, isBookmark),
      jni_zero::JavaRef<jobject>::CreateLeaky(env, date),
      jni_zero::JavaRef<jbyteArray>::CreateLeaky(env, favicon),
      jni_zero::JavaRef<jstring>::CreateLeaky(env, title),
      jni_zero::JavaRef<jobject>::CreateLeaky(env, visits));
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_SampleNonProxy_CreateHistoricalTabFromState(
    JNIEnv* env,
    const jni_zero::JavaRef<jbyteArray>& state,
    jint tabIndex);

JNI_ZERO_BOUNDARY_EXPORT void Java_org_jni_1zero_SampleNonProxy_nativeCreateHistoricalTabFromState(
    JNIEnv* env,
    jclass jcaller,
    jbyteArray state,
    jint tabIndex) {
  JNI_SampleNonProxy_CreateHistoricalTabFromState(
      env,
      jni_zero::JavaRef<jbyteArray>::CreateLeaky(env, state),
      tabIndex);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_SampleNonProxy_Destroy(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& jcaller,
    jint nativeChromeBrowserProvider);

JNI_ZERO_BOUNDARY_EXPORT void Java_org_jni_1zero_SampleNonProxy_nativeDestroy(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider) {
  JNI_SampleNonProxy_Destroy(
      env,
      jni_zero::JavaRef<jobject>::CreateLeaky(env, jcaller),
      nativeChromeBrowserProvider);
}

// Forward declaration. To be implemented by the including .cc file.
static jint JNI_SampleNonProxy_FindAll(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& jcaller,
    const jni_zero::JavaRef<jstring>& find);

JNI_ZERO_BOUNDARY_EXPORT jint Java_org_jni_1zero_SampleNonProxy_nativeFindAll(
    JNIEnv* env,
    jobject jcaller,
    jstring find) {
  auto _ret = JNI_SampleNonProxy_FindAll(
      env,
      jni_zero::JavaRef<jobject>::CreateLeaky(env, jcaller),
      jni_zero::JavaRef<jstring>::CreateLeaky(env, find));
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jni_zero::ScopedJavaLocalRef<jobjectArray> JNI_SampleNonProxy_GetAutofillProfileGUIDs(
    JNIEnv* env);

JNI_ZERO_BOUNDARY_EXPORT jobjectArray Java_org_jni_1zero_SampleNonProxy_nativeGetAutofillProfileGUIDs(
    JNIEnv* env,
    jclass jcaller) {
  auto _ret = JNI_SampleNonProxy_GetAutofillProfileGUIDs(env);
  return _ret.ReleaseLocal();
}

// Forward declaration. To be implemented by the including .cc file.
static jni_zero::ScopedJavaLocalRef<jstring> JNI_SampleNonProxy_GetDomainAndRegistry(
    JNIEnv* env,
    const jni_zero::JavaRef<jstring>& url);

JNI_ZERO_BOUNDARY_EXPORT jstring Java_org_jni_1zero_SampleNonProxy_nativeGetDomainAndRegistry(
    JNIEnv* env,
    jclass jcaller,
    jstring url) {
  auto _ret = JNI_SampleNonProxy_GetDomainAndRegistry(
      env,
      jni_zero::JavaRef<jstring>::CreateLeaky(env, url));
  return _ret.ReleaseLocal();
}

// Forward declaration. To be implemented by the including .cc file.
static jni_zero::ScopedJavaLocalRef<jobject> JNI_SampleNonProxy_GetInnerClass(JNIEnv* env);

JNI_ZERO_BOUNDARY_EXPORT jobject Java_org_jni_1zero_SampleNonProxy_nativeGetInnerClass(
    JNIEnv* env,
    jclass jcaller) {
  auto _ret = JNI_SampleNonProxy_GetInnerClass(env);
  return _ret.ReleaseLocal();
}

// Forward declaration. To be implemented by the including .cc file.
static jni_zero::ScopedJavaLocalRef<jbyteArray> JNI_SampleNonProxy_GetStateAsByteArray(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& jcaller,
    const jni_zero::JavaRef<jobject>& view);

JNI_ZERO_BOUNDARY_EXPORT jbyteArray Java_org_jni_1zero_SampleNonProxy_nativeGetStateAsByteArray(
    JNIEnv* env,
    jobject jcaller,
    jobject view) {
  auto _ret = JNI_SampleNonProxy_GetStateAsByteArray(
      env,
      jni_zero::JavaRef<jobject>::CreateLeaky(env, jcaller),
      jni_zero::JavaRef<jobject>::CreateLeaky(env, view));
  return _ret.ReleaseLocal();
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_SampleNonProxy_GotOrientation(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& jcaller,
    jint nativeDataFetcherImplAndroid,
    jdouble alpha,
    jdouble beta,
    jdouble gamma);

JNI_ZERO_BOUNDARY_EXPORT void Java_org_jni_1zero_SampleNonProxy_nativeGotOrientation(
    JNIEnv* env,
    jobject jcaller,
    jint nativeDataFetcherImplAndroid,
    jdouble alpha,
    jdouble beta,
    jdouble gamma) {
  JNI_SampleNonProxy_GotOrientation(
      env,
      jni_zero::JavaRef<jobject>::CreateLeaky(env, jcaller),
      nativeDataFetcherImplAndroid,
      alpha,
      beta,
      gamma);
}

// Forward declaration. To be implemented by the including .cc file.
static jint JNI_SampleNonProxy_Init(JNIEnv* env, const jni_zero::JavaRef<jobject>& jcaller);

JNI_ZERO_BOUNDARY_EXPORT jint Java_org_jni_1zero_SampleNonProxy_nativeInit(
    JNIEnv* env,
    jobject jcaller) {
  auto _ret = JNI_SampleNonProxy_Init(env, jni_zero::JavaRef<jobject>::CreateLeaky(env, jcaller));
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jint JNI_SampleNonProxy_Init(JNIEnv* env, const jni_zero::JavaRef<jobject>& jcaller);

JNI_ZERO_BOUNDARY_EXPORT jint Java_org_jni_1zero_SampleNonProxy_nativeInit(
    JNIEnv* env,
    jobject jcaller) {
  auto _ret = JNI_SampleNonProxy_Init(env, jni_zero::JavaRef<jobject>::CreateLeaky(env, jcaller));
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jni_zero::ScopedJavaLocalRef<jthrowable> JNI_SampleNonProxy_MessWithJavaException(
    JNIEnv* env,
    const jni_zero::JavaRef<jthrowable>& e);

JNI_ZERO_BOUNDARY_EXPORT jthrowable Java_org_jni_1zero_SampleNonProxy_nativeMessWithJavaException(
    JNIEnv* env,
    jclass jcaller,
    jthrowable e) {
  auto _ret = JNI_SampleNonProxy_MessWithJavaException(
      env,
      jni_zero::JavaRef<jthrowable>::CreateLeaky(env, e));
  return _ret.ReleaseLocal();
}

// Forward declaration. To be implemented by the including .cc file.
static jni_zero::ScopedJavaLocalRef<jobject> JNI_SampleNonProxy_QueryBitmap(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& jcaller,
    jint nativeChromeBrowserProvider,
    const jni_zero::JavaRef<jobjectArray>& projection,
    const jni_zero::JavaRef<jstring>& selection,
    const jni_zero::JavaRef<jobjectArray>& selectionArgs,
    const jni_zero::JavaRef<jstring>& sortOrder);

JNI_ZERO_BOUNDARY_EXPORT jobject Java_org_jni_1zero_SampleNonProxy_nativeQueryBitmap(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider,
    jobjectArray projection,
    jstring selection,
    jobjectArray selectionArgs,
    jstring sortOrder) {
  auto _ret = JNI_SampleNonProxy_QueryBitmap(
      env,
      jni_zero::JavaRef<jobject>::CreateLeaky(env, jcaller),
      nativeChromeBrowserProvider,
      jni_zero::JavaRef<jobjectArray>::CreateLeaky(env, projection),
      jni_zero::JavaRef<jstring>::CreateLeaky(env, selection),
      jni_zero::JavaRef<jobjectArray>::CreateLeaky(env, selectionArgs),
      jni_zero::JavaRef<jstring>::CreateLeaky(env, sortOrder));
  return _ret.ReleaseLocal();
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_SampleNonProxy_SetRecognitionResults(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& jcaller,
    jint sessionId,
    const jni_zero::JavaRef<jobjectArray>& results);

JNI_ZERO_BOUNDARY_EXPORT void Java_org_jni_1zero_SampleNonProxy_nativeSetRecognitionResults(
    JNIEnv* env,
    jobject jcaller,
    jint sessionId,
    jobjectArray results) {
  JNI_SampleNonProxy_SetRecognitionResults(
      env,
      jni_zero::JavaRef<jobject>::CreateLeaky(env, jcaller),
      sessionId,
      jni_zero::JavaRef<jobjectArray>::CreateLeaky(env, results));
}



#endif  // org_jni_1zero_SampleNonProxy_JNI
