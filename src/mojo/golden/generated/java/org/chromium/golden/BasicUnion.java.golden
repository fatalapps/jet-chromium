// BasicUnion.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     basic_union.test-mojom
//

package org.chromium.golden;

import androidx.annotation.IntDef;
import org.chromium.build.annotations.NullMarked;
import org.chromium.build.annotations.Nullable;


@NullMarked
@SuppressWarnings("NullAway")
public final class BasicUnion extends org.chromium.mojo.bindings.Union {

    public static final class Tag {
        public static final int NumericValue = 0;
        public static final int EnumValue = 1;
        public static final int StructValue = 2;
    };
    private int mNumericValue;
    private int mEnumValue;
    private StructInUnion mStructValue;

    public void setNumericValue(int numericValue) {
        this.mTag = Tag.NumericValue;
        this.mNumericValue = numericValue;
    }

    public int getNumericValue() {
        assert this.mTag == Tag.NumericValue;
        return this.mNumericValue;
    }

    public void setEnumValue(int enumValue) {
        this.mTag = Tag.EnumValue;
        this.mEnumValue = enumValue;
    }

    public int getEnumValue() {
        assert this.mTag == Tag.EnumValue;
        return this.mEnumValue;
    }

    public void setStructValue(StructInUnion structValue) {
        this.mTag = Tag.StructValue;
        this.mStructValue = structValue;
    }

    public StructInUnion getStructValue() {
        assert this.mTag == Tag.StructValue;
        return this.mStructValue;
    }


    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder0, int offset) {
        encoder0.encode(org.chromium.mojo.bindings.BindingsHelper.UNION_SIZE, offset);
        encoder0.encode(this.mTag, offset + 4);
        switch (mTag) {
            case Tag.NumericValue: {
                
                encoder0.encode(this.mNumericValue, offset + 8);
                break;
            }
            case Tag.EnumValue: {
                
                encoder0.encode(this.mEnumValue, offset + 8);
                break;
            }
            case Tag.StructValue: {
                
                encoder0.encode(this.mStructValue, offset + 8, false);
                break;
            }
            default: {
                break;
            }
        }
    }

    public static BasicUnion deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message).decoderForSerializedUnion(), 0);
    }

    public static final BasicUnion decode(org.chromium.mojo.bindings.Decoder decoder0, int offset) {
        org.chromium.mojo.bindings.DataHeader dataHeader = decoder0.readDataHeaderForUnion(offset);
        if (dataHeader.size == 0) {
            return null;
        }
        BasicUnion result = new BasicUnion();
        switch (dataHeader.elementsOrVersion) {
            case Tag.NumericValue: {
                
                result.mNumericValue = decoder0.readInt(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE);
                result.mTag = Tag.NumericValue;
                break;
            }
            case Tag.EnumValue: {
                
                result.mEnumValue = decoder0.readInt(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE);
                    EnumInUnion.validate(result.mEnumValue);
                    result.mEnumValue = EnumInUnion.toKnownValue(result.mEnumValue);
                result.mTag = Tag.EnumValue;
                break;
            }
            case Tag.StructValue: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mStructValue = StructInUnion.decode(decoder1);
                result.mTag = Tag.StructValue;
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }
}