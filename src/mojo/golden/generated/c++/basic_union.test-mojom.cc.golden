// basic_union.test-mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "basic_union.test-mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/thread_pool/thread_pool_instance.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "base/types/cxx23_to_underlying.h"
#include "mojo/public/cpp/bindings/features.h"
#include "mojo/public/cpp/bindings/lib/default_construct_tag_internal.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/cpp/bindings/urgent_message_scope.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "basic_union.test-mojom-params-data.h"
#include "basic_union.test-mojom-shared-message-ids.h"

#include "basic_union.test-mojom-import-headers.h"
#include "basic_union.test-mojom-test-utils.h"


namespace golden {
StructInUnion::StructInUnion()
    : flag(),
      value() {}

StructInUnion::StructInUnion(
    bool flag_in,
    const std::string& value_in)
    : flag(std::move(flag_in)),
      value(std::move(value_in)) {}

StructInUnion::~StructInUnion() = default;
size_t StructInUnion::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->flag);
  seed = mojo::internal::Hash(seed, this->value);
  return seed;
}

void StructInUnion::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "flag"), this->flag,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "value"), this->value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool StructInUnion::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BasicUnionPtr
BasicUnion::NewNumericValue(
    int32_t value) {
  return BasicUnionPtr(
      std::in_place,
      std::in_place_index<static_cast<size_t>(Tag::kNumericValue)>,
      std::move(value));
}

BasicUnionPtr
BasicUnion::NewEnumValue(
    EnumInUnion value) {
  return BasicUnionPtr(
      std::in_place,
      std::in_place_index<static_cast<size_t>(Tag::kEnumValue)>,
      std::move(value));
}

BasicUnionPtr
BasicUnion::NewStructValue(
    StructInUnionPtr value) {
  return BasicUnionPtr(
      std::in_place,
      std::in_place_index<static_cast<size_t>(Tag::kStructValue)>,
      std::move(value));
}

BasicUnion::BasicUnion(
    std::in_place_index_t<static_cast<size_t>(Tag::kNumericValue)>,
    int32_t value)
    : tag_(Tag::kNumericValue),
      data_(std::in_place_index<static_cast<size_t>(Tag::kNumericValue)>,
            std::move(value)) {}

BasicUnion::BasicUnion(
    std::in_place_index_t<static_cast<size_t>(Tag::kEnumValue)>,
    EnumInUnion value)
    : tag_(Tag::kEnumValue),
      data_(std::in_place_index<static_cast<size_t>(Tag::kEnumValue)>,
            std::move(value)) {}

BasicUnion::BasicUnion(
    std::in_place_index_t<static_cast<size_t>(Tag::kStructValue)>,
    StructInUnionPtr value)
    : tag_(Tag::kStructValue),
      data_(std::in_place_index<static_cast<size_t>(Tag::kStructValue)>,
            std::move(value)) {}
BasicUnion::~BasicUnion() {
  DestroyActive();
}

void BasicUnion::set_numeric_value(int32_t numeric_value) {
  if (tag_ != Tag::kNumericValue) {
    DestroyActive();
    tag_ = Tag::kNumericValue;
  }
  data_.numeric_value = numeric_value;
}

void BasicUnion::set_enum_value(EnumInUnion enum_value) {
  if (tag_ != Tag::kEnumValue) {
    DestroyActive();
    tag_ = Tag::kEnumValue;
  }
  data_.enum_value = enum_value;
}

void BasicUnion::set_struct_value(StructInUnionPtr struct_value) {
  if (tag_ == Tag::kStructValue) {
    data_.struct_value = std::move(struct_value);
  } else {
    DestroyActive();
    tag_ = Tag::kStructValue;
    new (&data_.struct_value) StructInUnionPtr(
        std::move(struct_value));
  }
}


BasicUnion::Union_::Union_(
    std::in_place_index_t<static_cast<size_t>(Tag::kNumericValue)>,
    int32_t value)
    : numeric_value(std::move(value)) {}

BasicUnion::Union_::Union_(
    std::in_place_index_t<static_cast<size_t>(Tag::kEnumValue)>,
    EnumInUnion value)
    : enum_value(std::move(value)) {}

BasicUnion::Union_::Union_(
    std::in_place_index_t<static_cast<size_t>(Tag::kStructValue)>,
    StructInUnionPtr value)
    : struct_value(std::move(value)) {}

void BasicUnion::DestroyActive() {
  switch (tag_) {

    case Tag::kNumericValue:
      std::destroy_at(&data_.numeric_value);
      break;
    case Tag::kEnumValue:
      std::destroy_at(&data_.enum_value);
      break;
    case Tag::kStructValue:
      std::destroy_at(&data_.struct_value);
      break;
  }
}
size_t BasicUnion::Hash(size_t seed) const {
  seed = mojo::internal::HashCombine(seed, static_cast<uint32_t>(tag_));
  switch (tag_) {

    case Tag::kNumericValue:
      return mojo::internal::Hash(seed, data_.numeric_value);
    case Tag::kEnumValue:
      return mojo::internal::Hash(seed, data_.enum_value);
    case Tag::kStructValue:
      return mojo::internal::Hash(seed, data_.struct_value);
    default:
      NOTREACHED();
  }
}

bool BasicUnion::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context, false);
}


}  // golden


namespace mojo {


// static
bool StructTraits<::golden::StructInUnion::DataView, ::golden::StructInUnionPtr>::Read(
    ::golden::StructInUnion::DataView input,
    ::golden::StructInUnionPtr* output) {
  bool success = true;
  ::golden::StructInUnionPtr result(::golden::StructInUnion::New());
  
      if (success)
        result->flag = input.flag();
      if (success && !input.ReadValue(&result->value))
        success = false;
  *output = std::move(result);
  return success;
}

// static
bool UnionTraits<::golden::BasicUnion::DataView, ::golden::BasicUnionPtr>::Read(
    ::golden::BasicUnion::DataView input,
    ::golden::BasicUnionPtr* output) {
  using UnionType = ::golden::BasicUnion;
  using Tag = UnionType::Tag;

  switch (input.tag()) {
    case Tag::kNumericValue: {
      *output = UnionType::NewNumericValue(input.numeric_value());
      break;
    }
    case Tag::kEnumValue: {
      ::golden::EnumInUnion result_enum_value;
      if (!input.ReadEnumValue(&result_enum_value))
        return false;

      *output = UnionType::NewEnumValue(result_enum_value);
      break;
    }
    case Tag::kStructValue: {
      ::golden::StructInUnionPtr result_struct_value{};
      if (!input.ReadStructValue(&result_struct_value))
        return false;

      *output = UnionType::NewStructValue(
          std::move(result_struct_value));
      break;
    }
    default:

      return false;
  }
  return true;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace golden {




}  // golden


#if defined(__clang__)
#pragma clang diagnostic pop
#endif